name: Neurodesk CI

on:
  push:
    branches: [ master ]
    paths-ignore: [ '**/README.md' ]  
  pull_request:
    paths-ignore: [ '**/README.md' ] 
    
env:
  DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
  ORACLE_USER: ${{ secrets.ORACLE_USER }}
  ORACLE_NEURODESK_BUCKET: ${{ secrets.ORACLE_NEURODESK_BUCKET }}
  OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
  OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
  OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
  OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: login to docker hubs
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    - name: Test neurodesk cli version
      run: |
        #setup singularity 2.6.1 from neurodebian
        wget -O- http://neuro.debian.net/lists/bionic.us-nh.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
        sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9
        sudo apt-get update
        sudo apt-get install singularity-container 
        /bin/bash .github/workflows/test_neurodesk_cli.sh
    - name: Pull latest neurodesk build from Github Packages
      run: |
        IMAGEID=docker.pkg.github.com/$GITHUB_REPOSITORY/neurodesk
        IMAGEID=$(echo $IMAGEID | tr '[A-Z]' '[a-z]')
        {
          docker pull $IMAGEID \
            && ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' $IMAGEID) \
            && echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_ENV
        } || echo "$IMAGEID not found. Resuming build..."
        echo "IMAGEID=$IMAGEID" >> $GITHUB_ENV
    - name: Build new neurodesk image
      run: |
        SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
        docker build . --file neurodesk/Dockerfile --tag $IMAGEID:$SHORT_SHA --cache-from $IMAGEID --label "GITHUB_REPOSITORY=$GITHUB_REPOSITORY" --label "GITHUB_SHA=$GITHUB_SHA"
        ROOTFS_NEW=$(docker inspect --format='{{.RootFS}}' $IMAGEID:$SHORT_SHA)
        BUILDDATE=`date +%Y%m%d`
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "ROOTFS_NEW=$ROOTFS_NEW" >> $GITHUB_ENV
        echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
    - name: Push neurodesk to Github packages (if changes found)
      if: env.GITHUB_REF != 'refs/heads/master' && env.ROOTFS_NEW != env.ROOTFS_CACHE
      run: |
        # Push to GH Packages
        docker tag $IMAGEID:$SHORT_SHA $IMAGEID:$BUILDDATE
        docker tag $IMAGEID:$SHORT_SHA $IMAGEID:latest
        docker push $IMAGEID:latest
        docker push $IMAGEID:$BUILDDATE
    - name: Push neurodesk to Dockerhub  (if enabled & changes found)
      if: env.GITHUB_REF != 'refs/heads/master' && env.DOCKERHUB_ORG != ''
      run: |
        # Push to GH Packages
        docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/neurodesk:$BUILDDATE
        docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/neurodesk:latest
        docker push $DOCKERHUB_ORG/neurodesk:latest
        docker push $DOCKERHUB_ORG/neurodesk:$BUILDDATE
    - name: Pull latest VNM build from Github Packages
      run: |
        IMAGEID=docker.pkg.github.com/$GITHUB_REPOSITORY/vnm
        IMAGEID=$(echo $IMAGEID | tr '[A-Z]' '[a-z]')
        {
          docker pull $IMAGEID \
            && ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' $IMAGEID) \
            && echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_ENV
        } || echo "$IMAGEID not found. Resuming build..."
        echo "IMAGEID=$IMAGEID" >> $GITHUB_ENV
    - name: Build new vnm image
      run: |
        SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
        docker build . --file vnm/Dockerfile --tag $IMAGEID:$SHORT_SHA --cache-from $IMAGEID --label "GITHUB_REPOSITORY=$GITHUB_REPOSITORY" --label "GITHUB_SHA=$GITHUB_SHA"
        ROOTFS_NEW=$(docker inspect --format='{{.RootFS}}' $IMAGEID:$SHORT_SHA)
        BUILDDATE=`date +%Y%m%d`
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "ROOTFS_NEW=$ROOTFS_NEW" >> $GITHUB_ENV
        echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
    - name: Test VNM container image
      run: |
        /bin/bash .github/workflows/test_neurodesk_image.sh
    - name: Push vnm to Github packages (if changes found)
      if: env.GITHUB_REF != 'refs/heads/master' && env.ROOTFS_NEW != env.ROOTFS_CACHE
      run: |
        # Push to GH Packages
        docker tag $IMAGEID:$SHORT_SHA $IMAGEID:$BUILDDATE
        docker tag $IMAGEID:$SHORT_SHA $IMAGEID:latest
        docker push $IMAGEID:latest
        docker push $IMAGEID:$BUILDDATE
    - name: Push vnm to Dockerhub  (if enabled & changes found)
      if: env.GITHUB_REF != 'refs/heads/master' && env.DOCKERHUB_ORG != ''
      run: |
        # Push to GH Packages
        docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/neurodesk:$BUILDDATE
        docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/neurodesk:latest
        docker push $DOCKERHUB_ORG/neurodesk:latest
        docker push $DOCKERHUB_ORG/neurodesk:$BUILDDATE
    - name: Free up disk space on runner
      run: bash .github/workflows/free-up-space.sh
    - name : Check if singularity cache files exist in oracle cloud and swift storage and build if not there
      run: |
        echo ${GITHUB_REF}
        echo "ORACLE_USER=$ORACLE_USER" >> $GITHUB_ENV 
        echo "ORACLE_NEURODESK_BUCKET=$ORACLE_NEURODESK_BUCKET" >> $GITHUB_ENV 
        /bin/bash .github/workflows/upload_containers_oracle.sh
    - name: Upload Neurodesk Singularity Container
      run: |
        /bin/bash .github/workflows/upload_neurodesk_singularity.sh
